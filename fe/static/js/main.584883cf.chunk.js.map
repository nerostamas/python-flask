{"version":3,"sources":["services/auth.service.ts","views/LoginView.tsx","services/user.services.ts","views/MenuSider.tsx","views/user/AddUserView.tsx","views/user/UserListView.tsx","services/ticket.service.ts","views/ticket/AddTicketView.tsx","views/ticket/TicketListView.tsx","services/comment.services.ts","views/ticket/TicketDetailView.tsx","views/HomePage.tsx","views/ErrorBoundary.tsx","views/MainRootView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["login","username","password","axios","post","then","data","console","log","logout","Content","Header","layout","labelCol","span","wrapperCol","tailLayout","offset","LoginView","onFinish","values","message","success","props","history","push","onFinishFailed","errorInfo","error","style","width","height","color","display","justifyContent","minWidth","position","top","left","LockTwoTone","fontSize","margin","name","initialValues","remember","this","Item","label","rules","required","Password","valuePropName","type","htmlType","React","Component","withRouter","createUser","role","getAllUser","get","SubMenu","MenuSider","state","requestLogout","setState","defaultSelectedKeys","defaultOpenKeys","mode","onClick","LogoutOutlined","includes","key","title","UsergroupAddOutlined","to","CreditCardOutlined","AddUserView","padding","maxWidth","size","Option","value","columns","dataIndex","UserListView","userList","dataSource","createTicket","content","Axios","getTicketById","id","AddTicketView","TextArea","render","item","Date","toLocaleDateString","toLocaleTimeString","_id","TicketListView","ticketList","userIds","map","createdBy","ids","updateTicket","find","user","comment","ticketId","getCommentByTicket","page","pageSize","deleteMyComment","commentId","delete","TicketDetailView","ticket","undefined","comments","getTicketId","match","params","onDelete","onChangePage","renderComment","length","marginRight","userId","paddingRight","createTime","marginLeft","cursor","defaultCurrent","total","onChange","userListMap","Footer","Sider","HomePage","backgroundColor","path","interceptors","response","use","Promise","reject","ErrorBoundary","requestInterceptor","responseInterceptor","hasError","_unhandledRejectionEventHandler","event","_shouldHandleError","_response","PromiseRejectionEvent","reason","CustomEvent","detail","handlePromiseResponseError","status","processExpectedServerError","errorData","window","location","pathname","href","addEventListener","removeEventListener","children","MainRootView","PureComponent","App","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.584883cf.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst login = (username: string, password: string) => {\n  return axios\n    .post(`/api/auth/login`, {\n      username,\n      password\n    })\n    .then(data => console.log(data));\n};\n\nconst logout = () => {\n  return axios.post(`/api/auth/logout`);\n};\n\nexport { login, logout };\n","import React from 'react';\nimport { Form, Input, Button, Checkbox, Layout, message } from 'antd';\nimport { LockTwoTone } from '@ant-design/icons';\nimport { login } from '../services/auth.service';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nconst { Content, Header } = Layout;\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 }\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 }\n};\n\ninterface IProps {}\n\ninterface IState {}\n\nclass LoginView extends React.Component<IProps & RouteComponentProps, IState> {\n  onFinish = (values: any) => {\n    const { username, password } = values;\n    return login(username, password).then(() => {\n      message.success('Login success');\n      const { history } = this.props;\n      history.push('/app');\n    });\n    // .catch(err => console.log('login', err));\n  };\n\n  onFinishFailed = (errorInfo: any) => {\n    message.error('Invalid username or password');\n  };\n\n  render() {\n    return (\n      <Layout\n        style={{\n          width: '100',\n          height: '100%'\n        }}\n      >\n        <Header>\n          <h1\n            style={{\n              color: '#ffffff',\n              display: 'flex',\n              justifyContent: 'space-around'\n            }}\n          >\n            Login to system\n          </h1>\n        </Header>\n        <Content\n          style={{\n            width: '45%',\n            minWidth: 350,\n            position: 'absolute',\n            top: '20%',\n            left: '20%'\n          }}\n        >\n          <LockTwoTone style={{ fontSize: 50, margin: '20px 60%' }} />\n          <Form\n            {...layout}\n            name='basic'\n            initialValues={{ remember: true }}\n            onFinish={this.onFinish}\n            onFinishFailed={this.onFinishFailed}\n          >\n            <Form.Item\n              label='Username'\n              name='username'\n              rules={[\n                { required: true, message: 'Please input your username!' }\n              ]}\n            >\n              <Input />\n            </Form.Item>\n\n            <Form.Item\n              label='Password'\n              name='password'\n              rules={[\n                { required: true, message: 'Please input your password!' }\n              ]}\n            >\n              <Input.Password />\n            </Form.Item>\n\n            <Form.Item {...tailLayout} name='remember' valuePropName='checked'>\n              <Checkbox>Remember me</Checkbox>\n            </Form.Item>\n\n            <Form.Item {...tailLayout}>\n              <Button type='primary' htmlType='submit'>\n                Submit\n              </Button>\n            </Form.Item>\n          </Form>\n        </Content>\n      </Layout>\n    );\n  }\n}\n\nexport default withRouter(LoginView);\n","import axios from 'axios';\n\nexport type ROLE = 'ADMIN' | 'SUPPORTER' | 'USER';\n\nconst createUser = ({\n  username,\n  password,\n  role\n}: {\n  username: string;\n  password: string;\n  role: ROLE;\n}) => {\n  return axios.post(`/api/users/create`, { username, password, role });\n};\n\nconst getAllUser = () => {\n  return axios.get(`/api/users/all`);\n};\n\nconst getByIds = (ids: string[]) => {\n  return axios.post(`/api/users/getByIds`, { ids });\n};\n\nconst getMyInfo = () => {\n  return axios.get(`/api/users/my`);\n};\n\nexport { createUser, getAllUser, getByIds, getMyInfo };\n","import React from 'react';\nimport { Menu } from 'antd';\nimport {\n  UsergroupAddOutlined,\n  CreditCardOutlined,\n  LogoutOutlined\n} from '@ant-design/icons';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport { logout } from '../services/auth.service';\nimport { getMyInfo } from '../services/user.services';\n\nconst { SubMenu } = Menu;\n\ninterface IState {\n  username: string;\n  role: string;\n}\nclass MenuSider extends React.Component<{} & RouteComponentProps, {}> {\n  state = {\n    username: '',\n    role: ''\n  };\n  requestLogout = () => {\n    const { history } = this.props;\n    logout().then(() => history.push('/login'));\n  };\n\n  componentDidMount() {\n    getMyInfo().then(({ data }) => {\n      this.setState({\n        username: data.username,\n        role: data.role\n      });\n    });\n  }\n\n  render() {\n    const { username, role } = this.state;\n    return (\n      <Menu\n        // onClick={this.handleClick}\n        style={{ width: 256 }}\n        defaultSelectedKeys={['3']}\n        defaultOpenKeys={['sub2']}\n        mode='inline'\n      >\n        <Menu.Item onClick={this.requestLogout}>\n          <span>\n            <LogoutOutlined />\n            <span>Logout, {username}</span>\n          </span>\n        </Menu.Item>\n        {['ADMIN', 'SUPPORTER'].includes(role) && (\n          <SubMenu\n            key='sub1'\n            title={\n              <span>\n                <UsergroupAddOutlined />\n                <span>Users</span>\n              </span>\n            }\n          >\n            <Menu.Item key='1'>\n              <Link to='/app/user-list'>List all</Link>\n            </Menu.Item>\n            <Menu.Item key='2'>\n              <Link to='/app/add-user'>Add</Link>\n            </Menu.Item>\n          </SubMenu>\n        )}\n\n        <SubMenu\n          key='sub2'\n          title={\n            <span>\n              <CreditCardOutlined />\n              <span>Tickets</span>\n            </span>\n          }\n        >\n          <Menu.Item key='3'>\n            <Link to='/app/ticket-list'>Ticket List</Link>\n          </Menu.Item>\n          <Menu.Item key='4'>\n            <Link to='/app/add-ticket'>Add Ticket</Link>\n          </Menu.Item>\n        </SubMenu>\n      </Menu>\n    );\n  }\n}\n\nexport default withRouter(MenuSider);\n","import React from 'react';\nimport { Form, Input, Button, Select, message } from 'antd';\nimport { createUser } from '../../services/user.services';\n\nclass AddUserView extends React.Component {\n  onFinish = values => {\n    return createUser({ ...values }).then(() =>\n      message.success('Create user success')\n    );\n  };\n\n  render() {\n    return (\n      <div style={{ padding: 10, width: '100%' }}>\n        <h1>Add user</h1>\n        <Form\n          labelCol={{ span: 4 }}\n          wrapperCol={{ span: 14 }}\n          layout='horizontal'\n          style={{ maxWidth: 600 }}\n          size='middle'\n          onFinish={this.onFinish}\n        >\n          <Form.Item\n            label='Username'\n            name='username'\n            rules={[{ required: true, message: 'Please input username!' }]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label='Password'\n            name='password'\n            rules={[{ required: true, message: 'Please input password!' }]}\n          >\n            <Input.Password />\n          </Form.Item>\n          <Form.Item\n            label='Role'\n            name='role'\n            rules={[{ required: true, message: 'Please choose a role!' }]}\n          >\n            <Select>\n              <Select.Option value='ADMIN'>Admin</Select.Option>\n              <Select.Option value='SUPPORTER'>Supporter</Select.Option>\n              <Select.Option value='USER'>User</Select.Option>\n            </Select>\n          </Form.Item>\n          <Form.Item wrapperCol={{ offset: 4 }}>\n            <Button type='primary' htmlType='submit'>\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default AddUserView;\n","import React from 'react';\nimport { ROLE, getAllUser } from '../../services/user.services';\nimport { Table } from 'antd';\n\nconst columns = [\n  {\n    title: 'Username',\n    dataIndex: 'username',\n    key: 'username'\n  },\n  {\n    title: 'Role',\n    dataIndex: 'role',\n    key: 'role'\n  }\n];\n\ninterface IState {\n  userList: { username: string; role: ROLE }[];\n}\n\nclass UserListView extends React.Component<{}, IState> {\n  state = {\n    userList: []\n  };\n  componentDidMount() {\n    getAllUser().then(({ data }) => this.setState({ userList: data }));\n  }\n  render() {\n    const { userList } = this.state;\n    return (\n      <div style={{ width: '100%', padding: 10 }}>\n        <Table dataSource={userList} columns={columns} />\n      </div>\n    );\n  }\n}\n\nexport default UserListView;\n","import Axios from 'axios';\n\nconst createTicket = ({\n  title,\n  content\n}: {\n  title: string;\n  content: string;\n}) => {\n  return Axios.post(`/api/ticket/create`, { title, content });\n};\n\nconst getAllTicket = () => {\n  return Axios.get(`/api/ticket/all`);\n};\n\nconst getTicketById = (id: string) => {\n  return Axios.get(`/api/ticket/byId/${id}`);\n};\n\nexport { createTicket, getAllTicket, getTicketById };\n","import React from 'react';\nimport { Form, Input, Button, message } from 'antd';\nimport { createTicket } from '../../services/ticket.service';\n\nclass AddTicketView extends React.Component {\n  onFinish = values => {\n    createTicket({ ...values }).then(() =>\n      message.success('create ticket success !')\n    );\n  };\n  render() {\n    return (\n      <div style={{ width: '100%', padding: 10 }}>\n        <h1>Add Ticket</h1>\n        <Form\n          labelCol={{ span: 4 }}\n          wrapperCol={{ span: 14 }}\n          layout='horizontal'\n          style={{ maxWidth: 600 }}\n          size='middle'\n          onFinish={this.onFinish}\n        >\n          <Form.Item\n            label='Title'\n            name='title'\n            rules={[{ required: true, message: 'Please input title!' }]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label='Content'\n            name='content'\n            rules={[{ required: true, message: 'Please input content!' }]}\n          >\n            <Input.TextArea />\n          </Form.Item>\n          <Form.Item wrapperCol={{ offset: 4 }}>\n            <Button type='primary' htmlType='submit'>\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default AddTicketView;\n","import React from 'react';\nimport { Table } from 'antd';\nimport { getAllTicket } from '../../services/ticket.service';\nimport { getByIds } from '../../services/user.services';\nimport { Link } from 'react-router-dom';\n\nconst columns = [\n  {\n    title: 'Title',\n    dataIndex: 'title',\n    key: 'title'\n  },\n  {\n    title: 'Content',\n    dataIndex: 'content',\n    key: 'content'\n  },\n  {\n    title: 'Created by',\n    dataIndex: 'createdBy',\n    key: 'createdBy'\n  },\n  {\n    title: 'Create time',\n    dataIndex: 'createTime',\n    key: 'createTime',\n    render: item =>\n      `${new Date(item).toLocaleDateString()} - ${new Date(\n        item\n      ).toLocaleTimeString()}`\n  },\n  {\n    title: '',\n    key: 'action',\n    render: item => <Link to={`/app/ticket/${item._id['$oid']}`}>View</Link>\n  }\n];\n\ninterface IState {\n  ticketList: {\n    _id: Object;\n    title: string;\n    content: String;\n    createdBy: string;\n    createTime: number;\n  }[];\n  userList: {\n    _id: Object;\n    username: string;\n  }[];\n}\n\nclass TicketListView extends React.Component<{}, IState> {\n  state = {\n    ticketList: [],\n    userList: []\n  };\n  async componentDidMount() {\n    const ticketList = await getAllTicket().then(({ data }) => data);\n    const userIds = ticketList.map(item => item.createdBy);\n    const userList = await getByIds(userIds).then(({ data }) => data);\n    const updateTicket = ticketList.map(item => ({\n      ...item,\n      createdBy: userList.find(user => user?._id['$oid'] === item.createdBy)\n        ?.username\n    }));\n    this.setState({ ticketList: updateTicket, userList });\n  }\n  render() {\n    const { ticketList } = this.state;\n    return (\n      <div style={{ width: '100%', padding: 10 }}>\n        <Table dataSource={ticketList} columns={columns} />\n      </div>\n    );\n  }\n}\n\nexport default TicketListView;\n","import Axios from 'axios';\n\nconst comment = (ticketId: string, { content }: { content: string }) => {\n  return Axios.post(`/api/comment/${ticketId}`, { content });\n};\n\nconst getCommentByTicket = (ticketId: string, page = 1, pageSize = 10) => {\n  return Axios.post(`/api/comment/view/${ticketId}`, { page, pageSize });\n};\n\nconst deleteMyComment = (commentId: string) => {\n  return Axios.delete(`/api/comment/${commentId}`);\n};\n\nexport { comment, getCommentByTicket, deleteMyComment };\n","import React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { getTicketById } from '../../services/ticket.service';\nimport { Row, Col, Form, Button, Input, message, Pagination } from 'antd';\nimport {\n  comment,\n  getCommentByTicket,\n  deleteMyComment\n} from '../../services/comment.services';\nimport { getAllUser } from '../../services/user.services';\n\ninterface IComment {\n  data: {\n    _id: Object;\n    userId: string;\n    ticketId: string;\n    content: string;\n    createTime: number;\n  }[];\n  pages: number;\n  page: number;\n  total: number;\n}\ninterface IState {\n  ticket: {\n    _id: Object;\n    title: string;\n    content: string;\n    createdBy: string;\n    createTime: number;\n  };\n  comments: IComment;\n  userList: {\n    _id: Object;\n    username: string;\n  }[];\n}\n\nclass TicketDetailView extends React.Component<RouteComponentProps, {}> {\n  state = {\n    ticket: undefined,\n    comments: {} as IComment,\n    userList: []\n  };\n\n  async componentDidMount() {\n    const id = this.getTicketId();\n    if (id) {\n      const ticket = await getTicketById(id).then(({ data }) => data);\n      const comments = await getCommentByTicket(id).then(({ data }) => data);\n      const userList = await getAllUser().then(({ data }) => data);\n      const userListMap = [];\n      userList.map(item => (userListMap[item._id['$oid']] = { ...item }));\n      this.setState({\n        ticket,\n        comments,\n        userList: userListMap\n      });\n    }\n  }\n\n  getTicketId = (): string => {\n    const {\n      match: { params }\n    } = this.props;\n    const { id } = params as { id: string };\n    return id;\n  };\n\n  onFinish = values => {\n    const id = this.getTicketId();\n    comment(id, { ...values }).then(({ data }) => {\n      message.success('Comment posted');\n      // const { comments } = this.state;\n      // const updated = [...comments, data];\n      // this.setState({ comments: updated });\n    });\n  };\n\n  onDelete = (commentId: string) => {\n    deleteMyComment(commentId).then(() => message.success('delete success'));\n  };\n\n  onChangePage = (page, pageSize) => {\n    const id = this.getTicketId();\n\n    getCommentByTicket(id, page, pageSize).then(({ data }) =>\n      this.setState({ comments: data })\n    );\n  };\n\n  renderComment = () => {\n    const { comments, userList } = this.state;\n    console.log(userList);\n    if (!comments || comments.data.length === 0) {\n      return <span>No comments</span>;\n    }\n    return (\n      <div>\n        {comments.data.map(item => (\n          <div key={item._id['$oid']}>\n            <span style={{ marginRight: 10 }}>\n              <b>{userList[item.userId]?.username}</b>({' '}\n              <span style={{ paddingRight: 10 }}>\n                {new Date(item.createTime).toLocaleDateString()}\n              </span>\n              <span>{new Date(item.createTime).toLocaleTimeString()}</span>):\n            </span>\n            <span>{item.content}</span>\n            <span\n              style={{ marginLeft: 15, cursor: 'pointer' }}\n              onClick={() => this.onDelete(item._id['$oid'])}\n            >\n              Delete\n            </span>\n          </div>\n        ))}\n        <Pagination\n          defaultCurrent={1}\n          total={comments.total}\n          onChange={this.onChangePage}\n        />\n      </div>\n    );\n  };\n\n  render() {\n    const { ticket, userList } = this.state;\n    if (!ticket) {\n      return null;\n    }\n    return (\n      <div style={{ width: '100%', padding: 10 }}>\n        <Row>\n          <Col span={24}>\n            <h1>Title: {ticket.title}</h1>\n          </Col>\n          <Col span={24}>\n            <h1>\n              Time: {new Date(ticket.createTime).toLocaleDateString()} -\n              {new Date(ticket.createTime).toLocaleTimeString()}\n            </h1>\n          </Col>\n          <Col span={24}>\n            <h1>Created by: {userList[ticket.createdBy]?.username}</h1>\n          </Col>\n          <Col span={24}>\n            <h1>Content: {ticket.content}</h1>\n          </Col>\n          <Col span={24}>{this.renderComment()}</Col>\n          <Col span={24}>\n            <Form\n              labelCol={{ span: 4 }}\n              wrapperCol={{ span: 14 }}\n              layout='horizontal'\n              style={{ maxWidth: 600 }}\n              size='middle'\n              onFinish={this.onFinish}\n            >\n              <Form.Item\n                label='Comment'\n                name='content'\n                rules={[{ required: true, message: 'Please input comment!' }]}\n              >\n                <Input.TextArea />\n              </Form.Item>\n              <Form.Item wrapperCol={{ offset: 4 }}>\n                <Button type='primary' htmlType='submit'>\n                  Submit\n                </Button>\n              </Form.Item>\n            </Form>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(TicketDetailView);\n","import React from 'react';\nimport { Row, Layout } from 'antd';\nimport MenuSider from './MenuSider';\nimport {\n  Switch,\n  Route,\n  Redirect,\n  RouteComponentProps,\n  withRouter\n} from 'react-router-dom';\nimport AddUserView from './user/AddUserView';\nimport UserListView from './user/UserListView';\nimport AddTicketView from './ticket/AddTicketView';\nimport TicketListView from './ticket/TicketListView';\nimport TicketDetailView from './ticket/TicketDetailView';\n\nconst { Header, Content, Footer, Sider } = Layout;\n\nclass HomePage extends React.Component<RouteComponentProps, {}> {\n  render() {\n    return (\n      <Layout style={{ height: '100%' }}>\n        <Header style={{ backgroundColor: '#00695c' }}>\n          <h1\n            style={{\n              color: '#ffffff',\n              display: 'flex',\n              justifyContent: 'space-around'\n            }}\n          >\n            DEMO\n          </h1>\n        </Header>\n        <Layout>\n          <Sider width={256} style={{ backgroundColor: '#ffff' }}>\n            <MenuSider />\n          </Sider>\n          <Content>\n            <Row>\n              <Switch>\n                <Route path='/app/add-user'>\n                  <AddUserView />\n                </Route>\n                <Route path='/app/user-list'>\n                  <UserListView />\n                </Route>\n                <Route path='/app/add-ticket'>\n                  <AddTicketView />\n                </Route>\n                <Route path='/app/ticket-list'>\n                  <TicketListView />\n                </Route>\n                <Route path='/app/ticket/:id'>\n                  <TicketDetailView />\n                </Route>\n                <Redirect to='/app/ticket-list' />\n              </Switch>\n            </Row>\n          </Content>\n        </Layout>\n        <Footer style={{ backgroundColor: '#00695c', color: '#ffffff' }}>\n          <h3 style={{ color: '#ffffff' }}>Demo - nguyenphuc9119@gmail.com</h3>\n        </Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default withRouter(HomePage);\n","import React from 'react';\nimport axios from 'axios';\nimport { message } from 'antd';\n\ninterface IState {\n  hasError: boolean;\n  error: any;\n}\n\naxios.interceptors.response.use(\n  response => response,\n  error => {\n    return Promise.reject(error);\n  }\n);\n\nclass ErrorBoundary extends React.Component<{}, IState> {\n  requestInterceptor: any = undefined;\n  responseInterceptor: any = undefined;\n  state = {\n    error: undefined,\n    hasError: false\n  };\n\n  componentDidMount() {\n    window.addEventListener(\n      'unhandledrejection',\n      this._unhandledRejectionEventHandler\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      'unhandledrejection',\n      this._unhandledRejectionEventHandler\n    );\n  }\n\n  private _unhandledRejectionEventHandler = (\n    event: PromiseRejectionEvent | CustomEvent\n  ) => {\n    let _shouldHandleError;\n    let _response;\n    if (\n      typeof PromiseRejectionEvent !== 'undefined' &&\n      event instanceof PromiseRejectionEvent\n    ) {\n      _shouldHandleError = event.reason && event.reason.response;\n      _response = event.reason ? event.reason.response : undefined;\n    } else if (event instanceof CustomEvent) {\n      _shouldHandleError =\n        event.detail && event.detail.reason && event.detail.reason.response;\n      _response =\n        event.detail && event.detail.reason\n          ? event.detail.reason.response\n          : undefined;\n    }\n\n    if (_shouldHandleError) {\n      this.handlePromiseResponseError(_response);\n      return;\n    }\n  };\n\n  handlePromiseResponseError = response => {\n    if (response.status >= 500) {\n      message.error('Server connection error');\n      return;\n    }\n\n    this.processExpectedServerError(response);\n  };\n\n  processExpectedServerError = (errorData: any) => {\n    if (errorData) {\n      if (errorData.data && errorData.data.message) {\n        message.error(errorData.data.message);\n      } else if (errorData && errorData.status === 401) {\n        if (window.location.pathname.includes('/login')) {\n          this.setState({ error: undefined });\n        } else {\n          message.error('401: Permission deny');\n          window.location.href = '/login';\n        }\n      }\n    }\n  };\n\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom';\nimport LoginView from './LoginView';\nimport HomePage from './HomePage';\nimport ErrorBoundary from './ErrorBoundary';\n\nclass MainRootView extends React.PureComponent {\n  render() {\n    return (\n      <ErrorBoundary>\n        <Router>\n          <Switch>\n            <Route path='/login'>\n              <LoginView />\n            </Route>\n            <Route path='/app'>\n              <HomePage />\n            </Route>\n            <Redirect to='/app' />\n          </Switch>\n        </Router>\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default MainRootView;\n","import React from 'react';\nimport MainRootView from './views/MainRootView';\n\nfunction App() {\n  return (\n    <div style={{ width: '100%', height: '100%' }}>\n      <MainRootView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}